name: Decrypt and Run Addition

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  decrypt-and-run:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Create decrypt and run script
      run: |
        cat > decrypt_and_run.py << 'EOF'
        #!/usr/bin/env python3
        """
        GitHub Actions version of decrypt_simple.py
        Uses environment variables instead of .env file
        """
        
        import os
        import tempfile
        import subprocess
        import sys
        import base64
        
        def xor_encrypt_decrypt(data: bytes, key: str) -> bytes:
            """XOR encrypt/decrypt data with key"""
            key_bytes = key.encode()
            key_len = len(key_bytes)
            return bytes([data[i] ^ key_bytes[i % key_len] for i in range(len(data))])
        
        def decrypt_file(encrypted_file_path: str, password: str) -> bytes:
            """Decrypt a file with given password using XOR cipher"""
            # Read the encrypted file
            with open(encrypted_file_path, 'rb') as encrypted_file:
                encoded_data = encrypted_file.read()
            
            # Decode from base64
            encrypted_data = base64.b64decode(encoded_data)
            
            # Decrypt the data using XOR
            decrypted_data = xor_encrypt_decrypt(encrypted_data, password)
            
            return decrypted_data
        
        def run_decrypted_program(decrypted_content: bytes):
            """Run the decrypted Python program"""
            # Create a temporary file to store decrypted content
            with tempfile.NamedTemporaryFile(mode='wb', suffix='.py', delete=False) as temp_file:
                temp_file.write(decrypted_content)
                temp_file_path = temp_file.name
            
            try:
                # Execute the temporary Python file
                print("Running decrypted program:")
                print("-" * 40)
                result = subprocess.run([sys.executable, temp_file_path], 
                                      capture_output=True, text=True)
                
                # Print the output
                if result.stdout:
                    print(result.stdout)
                if result.stderr:
                    print("STDERR:", result.stderr)
                    
                print("-" * 40)
                print(f"Program executed with return code: {result.returncode}")
                
                return result.returncode
                
            finally:
                # Clean up temporary file
                os.unlink(temp_file_path)
        
        def main():
            """Main function to decrypt and run the encrypted addition.py"""
            # Get decryption key from environment
            decrypt_key = os.environ.get('ENCRYPT_DECRYPT_KEY')
            if not decrypt_key:
                print("ERROR: ENCRYPT_DECRYPT_KEY environment variable not found")
                sys.exit(1)
            
            # File path
            encrypted_file = 'addition.py.encrypted'
            
            # Check if encrypted file exists
            if not os.path.exists(encrypted_file):
                print(f"ERROR: Encrypted file '{encrypted_file}' not found")
                sys.exit(1)
            
            # Decrypt and run the file
            try:
                print(f"Decrypting '{encrypted_file}'...")
                decrypted_content = decrypt_file(encrypted_file, decrypt_key)
                print("Decryption successful!")
                
                # Run the decrypted program
                return_code = run_decrypted_program(decrypted_content)
                
                # Exit with the same return code as the decrypted program
                sys.exit(return_code)
                
            except Exception as e:
                print(f"ERROR: Failed to decrypt or run file: {e}")
                sys.exit(1)
        
        if __name__ == "__main__":
            main()
        EOF
        
    - name: Decrypt and run addition.py
      env:
        ENCRYPT_DECRYPT_KEY: ${{ secrets.ENCRYPT_DECRYPT_KEY }}
      run: |
        python decrypt_and_run.py